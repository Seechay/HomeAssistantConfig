printrbot_safe_power_down:
  sequence:
  - condition: state
    entity_id: binary_sensor.printrbot_printing
    state: 'off'
  - service: rest_command.printrbot_octoprint_shutdown
    data: {}
  - delay:
      seconds: 20
  - service: switch.turn_off
    data:
      entity_id: switch.printrbot_power
printrbot_cancel_print:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - service: rest_command.printrbot_job_command
    data:
      payload: '{"command": "cancel"}'
printrbot_pause_print:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - service: rest_command.printrbot_command
    data:
      payload: '{"command": "pause", "action": "pause"}'
printrbot_resume_print:
  alias: 3D Printer Resume
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - service: rest_command.printrbot_job_command
    data:
      payload: '{"command": "pause", "action": "resume"}'
printrbot_home:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - condition: state
    entity_id: sensor.printrbot_current_state
    state: Operational
  - service: rest_command.printrbot_home
printrbot_level_bed:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - condition: state
    entity_id: sensor.printrbot_current_state
    state: Operational
  - service: rest_command.printrbot_printer_command
    data:
      cmd: G29
printrbot_cooldown:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - condition: state
    entity_id: sensor.printrbot_current_state
    state: Operational
  - service: rest_command.printrbot_bed_temp
    data:
      temp: 0
  - service: rest_command.printrbot_nozzle_temp
    data:
      temp: 0
printrbot_preheat_petg:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - condition: state
    entity_id: sensor.printrbot_current_state
    state: Operational
  - service: rest_command.printrbot_nozzle_temp
    data:
      temp: 215
printrbot_preheat_pla:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - condition: state
    entity_id: sensor.printrbot_current_state
    state: Operational
  - service: rest_command.printrbot_nozzle_temp
    data:
      temp: 205
printrbot_change_filament:
  sequence:
  - condition: state
    entity_id: switch.printrbot_controls
    state: 'on'
  - service: rest_command.printrbot_printer_command
    data:
      cmd: M600
alexa_input_music:
  alias: Play Music on Alexa Groups
  sequence:
  - service: media_player.play_media
    data:
      entity_id: media_player.echo_master
      media_content_id: play {{ states('input_text.alexa_text_input_for_groups') }}
        in {{ states('input_select.alexa_music_groups') }} group
      media_content_type: custom
stop_alexa_music:
  alias: Stop Music on Alexa Devices
  sequence:
  - service: media_player.media_stop
    data: {}
    target:
      entity_id:
      - media_player.echo_dot_office
      - media_player.echo_bathroom
      - media_player.echo_dot_living_room
      - media_player.echo_dot_playroom
      - media_player.echo_flex_hallway
      - media_player.echo_flex_playroom
      - media_player.echo_master
      - media_player.echo_show_kitchen
pihole_disable:
  alias: Pihole Disable
  icon: mdi:pi-hole
  sequence:
  - service: pi_hole.disable
    data:
      entity_id: all
      duration: 00:10:00
stop_neato:
  sequence:
  - service: vacuum.stop
    data:
      entity_id: vacuum.neato
run_neato_nogo:
  sequence:
  - service: neato.custom_cleaning
    data:
      entity_id: vacuum.neato
      mode: 2
      navigation: 2
      category: 4
run_neato_nogo_quiet:
  sequence:
  - service: vacuum.neato_custom_cleaning
    data:
      entity_id: vacuum.neato
      mode: 1
      navigation: 2
      category: 4
clean_kitchen:
  alias: Dwayne Clean Kitchen
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/ZoneCleaningCapability/start/set
      payload: dfc73a5f-c20a-4cab-9276-342feec8639e
clean_dining_room:
  alias: Dwayne Clean Dining Room
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/ZoneCleaningCapability/start/set
      payload: aed1a81d-e4d2-469e-848d-9f75b5990d81
clean_living_room:
  alias: Dwayne Clean Living Room
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/ZoneCleaningCapability/start/set
      payload: bedbd79c-4bb9-496a-8598-3d210d551781
clean_foyer:
  alias: Dwayne Clean Foyer
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/ZoneCleaningCapability/start/set
      payload: 7a2a6fad-682b-4bff-895a-1accb8732d0d
clean_mop:
  alias: Dwayne Clean Mop
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/ZoneCleaningCapability/start/set
      payload: 0a327b45-2f4f-4df6-8388-4076088a9c10
run_dwayne:
  alias: Dwayne Clean All
  sequence:
  - service: vacuum.start
    data:
      entity_id: vacuum.valetudo_dwayne
empty_dwayne:
  alias: Move Dwayne to garbage
  sequence:
  - service: mqtt.publish
    data:
      topic: valetudo/Dwayne/GoToLocationCapability/go/set
      payload: 465477a2-a946-4b43-bbba-c8667aec6fe7
vacuum_all:
  sequence:
  - service: script.turn_on
    data:
      entity_id: script.run_dwayne
  - service: script.turn_on
    data:
      entity_id: script.run_neato_nogo
tesla_prep:
  alias: Tesla Prep
  sequence:
  - service: climate.turn_on
    target:
      entity_id: climate.tesla_model_3_hvac_climate_system
  - delay:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
  - condition: state
    entity_id: binary_sensor.tesla_model_3_charger_sensor
    state: 'on'
  - service: climate.turn_off
    target:
      entity_id: climate.tesla_model_3_hvac_climate_system
  mode: single
chore_notification:
  description: Send an actionable notification for a chore
  fields:
    user_id:
      description: User ID of person completing the chore
      example: '1'
    chore_id:
      description: ID of chore to complete
      example: '1'
    chore_desc:
      description: Description of what the chore is
      example: Take out the trash
    notify_device:
      description: What device to use for notification
      example: mobile_app_cjs_phone
  sequence:
  - alias: Set up variables for the actions
    variables:
      action_track: '{{ ''TRACK_'' ~ context.id }}'
      action_ignore: '{{ ''IGNORE_'' ~ context.id }}'
  - alias: Ask to track chore or ignore
    service: notify.{{ notify_device }}
    data:
      message: 'The following chore is due: {{ chore_desc }}'
      data:
        actions:
        - action: '{{ action_track }}'
          title: Track
        - action: '{{ action_ignore }}'
          title: Ignore
  - alias: Wait for a response
    wait_for_trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: '{{ action_track }}'
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: '{{ action_ignore }}'
    timeout: '12:00:00'
    continue_on_timeout: false
  - alias: Perform the action
    choose:
    - conditions:
      - condition: template
        value_template: '{{ wait.trigger.event.data.action == action_track }}'
      sequence:
      - service: grocy.execute_chore
        data:
          chore_id: '{{ chore_id }}'
          done_by: '{{ user_id }}'
  mode: parallel
  max: 100

camera_snapshot_notification:
  description: Send a notification with a camera snapshot
  fields:
    camera:
      name: Camera to Snapshot
      description: The camera which creates the snapshot
      example: camera.garage
      selector:
        entity:
          domain: camera
    notify_device:
      description: What device to use for notification
      example: mobile_app_cjs_phone
    notification_title:
      name: Notification title (Optional)
      description: 'Default: "Something needs your attention!"'
      default: "Something needs your attention!"
    notification_message:
      name: Notification message (Optional)
      description: 'Default: "Would you like to do something?"'
      default: "Would you like to do something?"
    action_1_title:
      name: First action name
      description: Name of the first button
      default: ""
    action_1_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the first action
      default: ""
    action_1_action:
      name: Action 1
      description: "Action to run when the first action is clicked"
      default: []
      selector:
        action:
    action_2_title:
      name: Second action name
      description: Name of the second button
      default: ""
    action_2_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the second action
      default: ""
    action_2_action:
      name: Action 2
      description: Action to run when the second action is clicked"
      default: []
      selector:
        action:
    action_3_title:
      name: Third action name
      description: Name of the third button
      default: ""
    action_3_uri:
      name: URI for action 3 (Optional)
      description: Optional URI for the third action
      default: ""
    action_3_action:
      name: Action 3
      description: "Action to run when the third action is clicked"
      default: []
      selector:
        action:
  sequence:
  - alias: Set up variables for the actions
    variables:
      snapshot_create_file_path: "/config/www/tmp/snapshot_{{ states[camera].object_id }}.jpg"
      snapshot_access_file_path: "{{ snapshot_create_file_path | replace('/config/www','/local') }}"
  - alias: Create snapshot
    service: camera.snapshot
    target:
      entity_id: "{{ camera }}"
    data:
      filename: "{{ snapshot_create_file_path }}"
  - alias: Send actionable notification
    service: notify.{{ notify_device }}
    data:
      title: "{{ notification_title }}"
      message: "{{ notification_message }}"
      data:
        image: "{{ snapshot_access_file_path }}"
        actions: >
          {% set titles = [action_1_title, action_2_title, action_3_title] %}
          {% set uris = [action_1_uri, action_2_uri, action_3_uri] %}
          {% set actions = [action_1_action, action_2_action, action_3_action] %}
          {% set actions_data = namespace(data = []) %}

          {% for title in titles %}
            {% if title|length %}
              {% set uri = uris[loop.index - 1] %}
              {% set action = actions[loop.index - 1] %}
              {% if uri|length %}
                {% set action_data = {
                  "action": "URI",
                  "title": title,
                  "uri": uri 
                }
                %}
              {% else %}
                {% set action_data = {
                  "action": action,
                  "title": title
                  }
                %}
              {% endif %}
              {% set actions_data.data = actions_data.data + [action_data] %}
            {% endif %}
          {% endfor %}
          {{ actions_data.data }}
  mode: parallel
  max: 100